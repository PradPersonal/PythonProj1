name: Python CI/CD

on:
  push:
    branches:
      - main
      - staging
  release:
    types:
      - published

jobs:
  # Job to install dependencies, run tests, and build the application
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest # Assuming pytest is not in requirements.txt

      - name: Run tests with pytest
        run: pytest

      - name: Build application (e.g., create a distributable)
        run: |
          echo "Simulating a build step..."
          # Replace this with your actual build command, like building a Docker image or wheel.
          # For example, to build a source distribution:
          # python setup.py sdist

      - name: Store build artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-dist
          path: ./dist/

  # Job to deploy to the staging environment
  deploy-staging:
    needs: build-and-test
    if: github.ref == 'refs/heads/staging'
    environment: staging
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: app-dist
          path: ./dist/

      - name: Deploy to Staging
        env:
          DEPLOY_KEY: ${{ secrets.STAGING_DEPLOY_KEY }}
        run: |
          echo "Deploying to staging environment..."
          # Replace this with your staging deployment commands.
          # For example, using SSH:
          # ssh -i <path/to/ssh/key> -o StrictHostKeyChecking=no user@staging-server "mkdir -p /var/www/staging"
          # scp -i <path/to/ssh/key> -r ./dist/* user@staging-server:/var/www/staging/
          echo "Staging deployment complete."

  # Job to deploy to the production environment
  deploy-production:
    needs: build-and-test
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: production
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: app-dist
          path: ./dist/

      - name: Deploy to Production
        env:
          DEPLOY_KEY: ${{ secrets.PRODUCTION_DEPLOY_KEY }}
        run: |
          echo "Deploying to production environment..."
          # Replace this with your production deployment commands.
          # This might involve more robust steps, like rolling back on failure.
          echo "Production deployment complete."
